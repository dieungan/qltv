/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qltv;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.runtime.regexp.joni.constants.RegexState;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author Ngan Sam
 */
public class Quanlydocgia extends javax.swing.JPanel {

    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField searchBar;
    private int choose = 0;

    /**
     * Creates new form Quanlydocgia
     */
    public Quanlydocgia() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        btFind = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btSua = new javax.swing.JButton();
        btThem = new javax.swing.JButton();
        btHienthi = new javax.swing.JButton();
        btNhap = new javax.swing.JButton();
        btXuatfile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDocgia = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setBackground(new java.awt.Color(0, 153, 153));

        btFind.setText("Tìm kiếm");
        btFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindActionPerformed(evt);
            }
        });

        btDelete.setText("Xóa");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btSua.setText("Sửa");
        btSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuaActionPerformed(evt);
            }
        });

        btThem.setText("Thêm");
        btThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btThemActionPerformed(evt);
            }
        });

        btHienthi.setText("Hiển thị");
        btHienthi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHienthiActionPerformed(evt);
            }
        });

        btNhap.setText("Nhập file");
        btNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNhapActionPerformed(evt);
            }
        });

        btXuatfile.setText("Xuất file");
        btXuatfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXuatfileActionPerformed(evt);
            }
        });

        tableDocgia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã độc giả", "Tên độc giả", "Địa chỉ", "Số thẻ", "Giới tính"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableDocgia.setRowHeight(26);
        tableDocgia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableDocgiaMouseReleased(evt);
            }
        });
        tableDocgia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableDocgiaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableDocgia);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Nguyễn Thị Ngân - 20165434");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btNhap)
                .addGap(18, 18, 18)
                .addComponent(btXuatfile)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btHienthi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btFind))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNhap)
                    .addComponent(btXuatfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btFind)
                    .addComponent(btDelete)
                    .addComponent(btSua)
                    .addComponent(btThem)
                    .addComponent(btHienthi)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btThemActionPerformed
        // TODO add your handling code here:
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();
        String sql = "insert into quanlithuvien.docgia values (?,?,?,?,?)";
        try {
            cn.setAutoCommit(false);
            PreparedStatement pst = cn.prepareStatement(sql);
            for (int i = 0; i < tableDocgia.getRowCount(); i++) {
                if (!isEmptyRow(i)) {
                    pst.setString(1, (String) tableDocgia.getValueAt(i, 0));
                    pst.setString(2, (String) tableDocgia.getValueAt(i, 1));
                    pst.setString(3, (String) tableDocgia.getValueAt(i, 2));
                    pst.setString(4, (String) tableDocgia.getValueAt(i, 3));
                    pst.setString(5, (String) tableDocgia.getValueAt(i, 4));
                    pst.addBatch();
                    pst.executeUpdate();
                    cn.commit();
                }

            }
            JOptionPane.showMessageDialog(null, "Bạn đã thêm thành công");
        } catch (SQLException ex) {
            Logger.getLogger(Quanlydocgia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btThemActionPerformed

    private void btHienthiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHienthiActionPerformed
        // TODO add your handling code here:
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();
        ((DefaultTableModel) tableDocgia.getModel()).setNumRows(0);
        String sql = "select *from quanlithuvien.docgia";
        try {
            cn.setAutoCommit(false);
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) tableDocgia.getModel()).addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(Quanlydocgia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btHienthiActionPerformed

    private void tableDocgiaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableDocgiaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableDocgia.getSelectedRow() == tableDocgia.getRowCount() - 1) {
            ((DefaultTableModel) tableDocgia.getModel()).addRow(new Object[]{null});
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableDocgia.getSelectedColumn() == tableDocgia.getColumnCount() - 1) {
            tableDocgia.changeSelection(tableDocgia.getSelectedRow(), 0, false, false);
        }
    }//GEN-LAST:event_tableDocgiaKeyPressed

    private void btNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNhapActionPerformed
        // TODO add your handling code here:
        Vector colums = new Vector();
        String path = "";
        String dir = "";
        String fileName = "";
        JFileChooser fileChooser = new JFileChooser();
        int box = fileChooser.showOpenDialog(null);
        if (box == fileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getSelectedFile().getName();
            dir = fileChooser.getCurrentDirectory().toString();
            path = dir + "\\" + fileName;
        } else {
            return;
        }
        ((DefaultTableModel) tableDocgia.getModel()).setNumRows(0);
        try {
            FileInputStream file = new FileInputStream(new File(path));
            XSSFWorkbook workbook = new XSSFWorkbook(file);
            XSSFSheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowiIt = sheet.iterator();
            while (rowiIt.hasNext()) {
                Row row = rowiIt.next();
                Iterator<Cell> cellIt = row.cellIterator();
                if (row.getRowNum() == 0) {
                    while (cellIt.hasNext()) {
                        Cell cell = cellIt.next();
                        colums.add(cell.getStringCellValue());
                        ((DefaultTableModel) tableDocgia.getModel()).setColumnIdentifiers(colums);
                    }
                } else {
                    Vector<String> rowData = new Vector<String>();
                    while (cellIt.hasNext()) {
                        Cell cell = cellIt.next();
                        if (cell.getCellType() == CellType.STRING) {
                            rowData.add(cell.getStringCellValue());
                        } else if (cell.getCellType() == CellType.NUMERIC) {
                            rowData.add(Double.toString(cell.getNumericCellValue()));
                        }
                    }
                    ((DefaultTableModel) tableDocgia.getModel()).addRow(rowData);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btNhapActionPerformed

    private void tableDocgiaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDocgiaMouseReleased
        // TODO add your handling code here:
        tableDocgia.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = tableDocgia.rowAtPoint(e.getPoint());
                if (r >= 0 && r < tableDocgia.getRowCount()) {
                    tableDocgia.setRowSelectionAllowed(true);
                } else {
                    tableDocgia.clearSelection();
                }

                int[] rowindex = tableDocgia.getSelectedRows();
                for (int i = 0; i < rowindex.length; i++) {
                    int j = rowindex[i];
                    if (j < 0) {
                        return;
                    }
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    JPopupMenu popup = popUp();
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }

            }

            private JPopupMenu popUp() {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem deleteTable = new JMenuItem("Xóa bảng");
                deleteTable.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        ((DefaultTableModel) tableDocgia.getModel()).setNumRows(0);
                        ((DefaultTableModel) tableDocgia.getModel()).addRow(new Object[]{null});
                    }
                });
                popup.add(deleteTable);
                return popup;
            }

        });
    }//GEN-LAST:event_tableDocgiaMouseReleased

    private void btSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableDocgia.getModel();
        ConnectionDB connectionDB = new ConnectionDB();
        Connection con = connectionDB.getConnection();
        String sql = "update quanlithuvien.docgia set madg = ?, tendg = ?, diachi = ?, sothe = ?, gioitinh = ? where madg = ?";
        int rowSelected = tableDocgia.getSelectedRow();
        String temp = (String) tableModel.getValueAt(rowSelected, 0);
        try {
            con.setAutoCommit(false);
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(6, temp);
            pst.setString(1, (String) tableDocgia.getValueAt(rowSelected, 0));
            pst.setString(2, (String) tableDocgia.getValueAt(rowSelected, 1));
            pst.setString(3, (String) tableDocgia.getValueAt(rowSelected, 2));
            pst.setString(4, (String) tableDocgia.getValueAt(rowSelected, 3));
            pst.setString(5, (String) tableDocgia.getValueAt(rowSelected, 4));
            pst.addBatch();
            pst.executeUpdate();
            con.commit();
            JOptionPane.showMessageDialog(null, " Bạn đã sửa thành công");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btSuaActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Bạn có chắc chắn muốn xóa không");
        int[] rows = tableDocgia.getSelectedRows();
        Arrays.sort(rows);
        for (int i = 0; i < rows.length; i++) {
            int row = rows[i];
            ConnectionDB connectDB = new ConnectionDB();
            Connection connection = connectDB.getConnection();

            DefaultTableModel tableModel = (DefaultTableModel) tableDocgia.getModel();
            String sql = "DELETE FROM quanlithuvien.nhanvien WHERE (manv = ?)";
            try {
                connection.setAutoCommit(false);
                PreparedStatement pst = connection.prepareStatement(sql);
                String manv = (String) tableModel.getValueAt(row, 0);
                pst.setString(1, manv);
                pst.executeUpdate();
                connection.commit();
            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Can not delele!\n" + ex.getMessage());
            }
            ((DefaultTableModel) tableDocgia.getModel()).removeRow(row);
            for (int j = i + 1; j < rows.length; j++) {
                rows[j] = rows[j] - 1;
            }
        }
        JOptionPane.showMessageDialog(null, "Bạn đã xóa thành công");
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindActionPerformed
        // TODO add your handling code here:
        Searching();
    }//GEN-LAST:event_btFindActionPerformed

    private void btXuatfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXuatfileActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fis = new FileInputStream("I:\\quanlythuvien\\tbdocgia.docx");
            XWPFDocument xdoc = new XWPFDocument(OPCPackage.open(fis));
            Iterator bodyElementIterator = xdoc.getBodyElementsIterator();
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();

                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    java.util.List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        setDefaultTable(table);
                        for (int i = 1; i < table.getRows().size(); i++) {
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                removeParagraphs(table.getRow(i).getCell(j));
                                XWPFParagraph paragraph = table.getRow(i).getCell(j).addParagraph();
                                paragraph.createRun().setText(tableDocgia.getValueAt(i, j).toString());
                            }

                        }
                        addRowData(table, table.getRows().size());
                    }
                }
            }
            OutputStream out = new FileOutputStream("I:\\quanlythuvien\\tbdocgia.docx");
            xdoc.write(out);
            out.close();

        } catch (IOException | InvalidFormatException ex) {
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "File đã tạo thành công!\nẤn yes để mở file?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File("I:\\quanlythuvien\\tbdocgia.docx");
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
        } else {
        }
    }//GEN-LAST:event_btXuatfileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btFind;
    private javax.swing.JButton btHienthi;
    private javax.swing.JButton btNhap;
    private javax.swing.JButton btSua;
    private javax.swing.JButton btThem;
    private javax.swing.JButton btXuatfile;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableDocgia;
    // End of variables declaration//GEN-END:variables

    private boolean isEmptyRow(int i) {
        // đi từng ô trong hàng i và check xem ô này có dữ liệu hay không
        for (int j = 0; j < tableDocgia.getColumnCount(); j++) {
            String str = (String) tableDocgia.getValueAt(i, j);
            if (str == null) {
                return true;
            }
        }
        return false;
    }

    private void setDefaultTable(XWPFTable table) {
        for (int i = 1; i < table.getRows().size(); i++) {
            table.removeRow(1);
        }
    }

    private void removeParagraphs(XWPFTableCell tableCell) {
        int count = tableCell.getParagraphs().size();
        for (int i = 0; i < count; i++) {
            tableCell.removeParagraph(i);
        }
    }

    private void addRowData(XWPFTable table, int size) {
        for (int i = size - 1; i < tableDocgia.getRowCount(); i++) {
            XWPFTableRow newRow = table.createRow();
            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                newRow.getCell(j).setText(tableDocgia.getValueAt(i, j).toString());
            }

        }
    }

    private void Searching() {
        JFrame searchingBox = new JFrame("Tìm kiếm");
        searchingBox.setLocation(450, 400);
        searchingBox.setSize(600, 200);
        jComboBox1 = new javax.swing.JComboBox<>();
        searchBar = new javax.swing.JTextField();
        jLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        searchingBox.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tìm kiếm theo", "Mã độc giả", "Tên độc giả", "Địa chỉ", "Số thẻ", " Giới tính"}));
        jComboBox1.addActionListener((ActionEvent evt) -> {
            JComboBox<String> combo = (JComboBox<String>) evt.getSource();
            String selected = (String) combo.getSelectedItem();
            if (selected != null) {
                switch (selected) {
                    case "Mã độc giả":
                        choose = 1;
                        break;
                    case "Tên độc giả":
                        choose = 2;
                        break;
                    case "Địa chỉ":
                        choose = 3;
                        break;
                    case "Số thẻ":
                        choose = 4;
                        break;
                    case "Giới tính":
                        choose = 5;
                        break;
                }
            }
        });
        searchBar.setToolTipText("Search");

        jLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel.setText("Tìm kiếm");
        jLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        okButton.setText("OK");
        okButton.addActionListener((ActionEvent e) -> {
            process();
        });

        searchBar.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    process();
                }
            }
        });
        javax.swing.GroupLayout layoutSearchingBox = new javax.swing.GroupLayout(searchingBox.getContentPane());
        searchingBox.getContentPane().setLayout(layoutSearchingBox);
        layoutSearchingBox.setHorizontalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutSearchingBox.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(40, Short.MAX_VALUE))
        );
        layoutSearchingBox.setVerticalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutSearchingBox.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(okButton))
                        .addContainerGap(70, Short.MAX_VALUE))
        );
        searchingBox.setVisible(true);
    }

    private void process() {
        if (choose == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn thuộc tính tìm kiếm!");
            return;
        } else if (searchBar.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn hãy nhập vào ô tìm kiếm!");
            return;
        }
        ((DefaultTableModel) tableDocgia.getModel()).setNumRows(0);
        ConnectionDB connectDB = new ConnectionDB();
        Connection connection = connectDB.getConnection();
        String text = searchBar.getText().trim().replaceAll("\\s+", " ");
        DefaultTableModel tableModel = (DefaultTableModel) tableDocgia.getModel();
        switch (choose) {
            case 1:
                String sql = "SELECT * FROM quanlithuvien.docgia WHERE (madg = '" + text + "')";
                System.out.println(sql);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5)});

                    }
                    tableDocgia.setModel(tableModel);
                    warning(tableDocgia.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 2:
                String sql2 = "SELECT * FROM quanlithuvien.docgia WHERE (tendg = '" + text + "')";
                System.out.println(sql2);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql2);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5)});
                    }
                    tableDocgia.setModel(tableModel);
                    warning(tableDocgia.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 3:
                String sql3 = "SELECT * FROM quanlithuvien.docgia WHERE (diachi = '" + text + "')";
                System.out.println(sql3);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql3);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5)});
                    }
                    tableDocgia.setModel(tableModel);
                    warning(tableDocgia.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 4:
                String sql4 = "SELECT * FROM quanlithuvien.docgia WHERE (sothe = '" + text + "')";
                System.out.println(sql4);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql4);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5)});
                    }
                    tableDocgia.setModel(tableModel);
                    warning(tableDocgia.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 5:
                String sql5 = "SELECT * FROM quanlithuvien.docgia WHERE (gioitinh = '" + text + "')";
                System.out.println(sql5);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql5);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5)});
                    }
                    tableDocgia.setModel(tableModel);
                    warning(tableDocgia.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;

        }
    }

    private void warning(int rowCount) {
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "Không có kết quả phù hợp!");
        }

    }

}
