/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qltv;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFDataBarFormatting;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author Ngan Sam
 */
public class Quanlymuontra extends javax.swing.JPanel {

    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField searchBar;
    private int choose = 0;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabe2;
    private javax.swing.JButton okButton2;
    private javax.swing.JTextField searchBar2;
    private int choose2 = 0;
    private boolean[] insert1 = new boolean[1000000];

    /**
     * Creates new form Quanlymuontra
     */
    public Quanlymuontra() {
        initComponents();
        for (int i = 0; i < insert1.length; i++) {
            boolean b = insert1[i];
            b = false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btTimKiem1 = new javax.swing.JButton();
        btXoa1 = new javax.swing.JButton();
        btSua1 = new javax.swing.JButton();
        btThem1 = new javax.swing.JButton();
        btHienThi1 = new javax.swing.JButton();
        btNhapFile1 = new javax.swing.JButton();
        btXuatFile1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMuonTra = new javax.swing.JTable();
        JlabelHovaTensv = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableChiTietMuonTra = new javax.swing.JTable();
        btNhapFile2 = new javax.swing.JButton();
        btXuatFile2 = new javax.swing.JButton();
        btHienThi2 = new javax.swing.JButton();
        btThem2 = new javax.swing.JButton();
        btSua2 = new javax.swing.JButton();
        btXoa2 = new javax.swing.JButton();
        btTimKiem2 = new javax.swing.JButton();
        jLabelmuontrachitiet = new javax.swing.JLabel();
        jLabelmuontra = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));
        setDoubleBuffered(false);

        btTimKiem1.setText("Tìm kiếm");
        btTimKiem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTimKiem1ActionPerformed(evt);
            }
        });

        btXoa1.setText("Xóa");
        btXoa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXoa1ActionPerformed(evt);
            }
        });

        btSua1.setText("Sửa");
        btSua1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSua1ActionPerformed(evt);
            }
        });

        btThem1.setText("Thêm");
        btThem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btThem1ActionPerformed(evt);
            }
        });

        btHienThi1.setText("Hiển Thị");
        btHienThi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHienThi1ActionPerformed(evt);
            }
        });

        btNhapFile1.setText("Nhập File");
        btNhapFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNhapFile1ActionPerformed(evt);
            }
        });

        btXuatFile1.setText("Xuất File");
        btXuatFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXuatFile1ActionPerformed(evt);
            }
        });

        tableMuonTra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã độc giả", "Mã nhân viên", "Tiền đặt cọc", "Ngày mượn ", "Ngày hẹn trả", "Số lượng mượn", "Mã mượn trả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableMuonTra.setRowHeight(20);
        tableMuonTra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMuonTraMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMuonTraMouseReleased(evt);
            }
        });
        tableMuonTra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMuonTraKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableMuonTra);

        JlabelHovaTensv.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        JlabelHovaTensv.setText("Nguyễn Thị Ngân - 20165434");

        tableChiTietMuonTra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã chi tiết", "Mã sách", "Ngày hẹn trả", "Ngày trả", "Số tiền phạt", "Mã độc giả", "Mã mượn trả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableChiTietMuonTra.setRowHeight(20);
        tableChiTietMuonTra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableChiTietMuonTraMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableChiTietMuonTraMouseReleased(evt);
            }
        });
        tableChiTietMuonTra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableChiTietMuonTraKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableChiTietMuonTra);

        btNhapFile2.setText("Nhập File");
        btNhapFile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNhapFile2ActionPerformed(evt);
            }
        });

        btXuatFile2.setText("Xuất File");
        btXuatFile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXuatFile2ActionPerformed(evt);
            }
        });

        btHienThi2.setText("Hiển Thị");
        btHienThi2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHienThi2ActionPerformed(evt);
            }
        });

        btThem2.setText("Thêm");
        btThem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btThem2ActionPerformed(evt);
            }
        });

        btSua2.setText("Sửa");
        btSua2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSua2ActionPerformed(evt);
            }
        });

        btXoa2.setText("Xóa");
        btXoa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXoa2ActionPerformed(evt);
            }
        });

        btTimKiem2.setText("Tìm kiếm");
        btTimKiem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTimKiem2ActionPerformed(evt);
            }
        });

        jLabelmuontrachitiet.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelmuontrachitiet.setText("Bảng mượn trả chi tiết");

        jLabelmuontra.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelmuontra.setText("Bảng mượn trả");
        jLabelmuontra.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelmuontrachitiet)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btNhapFile2)
                                .addGap(18, 18, 18)
                                .addComponent(btXuatFile2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btHienThi2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btThem2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btSua2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btXoa2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btTimKiem2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btNhapFile1)
                        .addGap(18, 18, 18)
                        .addComponent(btXuatFile1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btHienThi1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btThem1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSua1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btXoa1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btTimKiem1)))
                .addGap(0, 298, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(jLabelmuontra)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JlabelHovaTensv, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(21, Short.MAX_VALUE)
                        .addComponent(jLabelmuontra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(JlabelHovaTensv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNhapFile1)
                    .addComponent(btXuatFile1)
                    .addComponent(btHienThi1)
                    .addComponent(btThem1)
                    .addComponent(btSua1)
                    .addComponent(btXoa1)
                    .addComponent(btTimKiem1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelmuontrachitiet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNhapFile2)
                    .addComponent(btXuatFile2)
                    .addComponent(btHienThi2)
                    .addComponent(btThem2)
                    .addComponent(btSua2)
                    .addComponent(btXoa2)
                    .addComponent(btTimKiem2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btNhapFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNhapFile1ActionPerformed
        // TODO add your handling code here:
        Vector colums = new Vector();
        String path = "";
        String dir = "";
        String fileName = "";
        JFileChooser fileChooser = new JFileChooser();
        int box = fileChooser.showOpenDialog(null);
        if (box == fileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getSelectedFile().getName();
            dir = fileChooser.getCurrentDirectory().toString();
            path = dir + "\\" + fileName;
        } else {
            return;
        }
        ((DefaultTableModel) tableMuonTra.getModel()).setNumRows(0);
        try {
            FileInputStream file = new FileInputStream(new File(path));
            XSSFWorkbook workbook = new XSSFWorkbook(file);
            XSSFSheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowiIt = sheet.iterator();
            while (rowiIt.hasNext()) {
                Row row = rowiIt.next();
                Iterator<Cell> cellIt = row.cellIterator();
                if (row.getRowNum() == 0) {
                    while (cellIt.hasNext()) {
                        Cell cell = cellIt.next();
                        colums.add(cell.getStringCellValue());
                        ((DefaultTableModel) tableMuonTra.getModel()).setColumnIdentifiers(colums);
                    }
                } else {
                    Vector<String> rowData = new Vector<String>();
                    while (cellIt.hasNext()) {
                        Cell cell = cellIt.next();
                        if (cell.getCellType() == CellType.STRING) {
                            rowData.add(cell.getStringCellValue());
                        } else if (cell.getCellType() == CellType.NUMERIC) {
                            if (DateUtil.isCellDateFormatted(cell)) {
                                DateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                                String dateString = date.format(cell.getDateCellValue());
                                rowData.add(dateString);
                                System.out.println("Thành công");
                            } else {
                                rowData.add(Double.toString(cell.getNumericCellValue()));
                            }
                        }

                    }
                    ((DefaultTableModel) tableMuonTra.getModel()).addRow(rowData);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btNhapFile1ActionPerformed

    private void btThem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btThem1ActionPerformed
        // TODO add your handling code here:
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();
        String sql = "insert into quanlithuvien.muontra values(?,?,?,?,?,?,?)";
        try {
            cn.setAutoCommit(false);
            PreparedStatement pst = cn.prepareStatement(sql);
            for (int i = 0; i < tableMuonTra.getRowCount(); i++) {
                if (!insert1[i] && !isEmptyRow(i)) {
                    pst.setString(1, (String) tableMuonTra.getValueAt(i, 0));
                    pst.setString(2, (String) tableMuonTra.getValueAt(i, 1));
                    pst.setString(3, (String) tableMuonTra.getValueAt(i, 2));
                    pst.setString(4, (String) tableMuonTra.getValueAt(i, 3));
                    pst.setString(5, (String) tableMuonTra.getValueAt(i, 4));
                    pst.setString(6, (String) tableMuonTra.getValueAt(i, 5));
                    pst.setString(7, (String) tableMuonTra.getValueAt(i, 6));
                    pst.addBatch();
                    pst.executeUpdate();
                    cn.commit();
                    insert1[i] = true;
                }
            }
            JOptionPane.showMessageDialog(null, "Bạn đã thêm thành công");
        } catch (SQLException ex) {
            Logger.getLogger(Quanlymuontra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btThem1ActionPerformed

    private void tableMuonTraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMuonTraKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableMuonTra.getSelectedRow() == tableMuonTra.getRowCount() - 1) {
            ((DefaultTableModel) tableMuonTra.getModel()).addRow(new Object[]{null});
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableMuonTra.getSelectedColumn() == tableMuonTra.getColumnCount() - 1) {
            tableMuonTra.changeSelection(tableMuonTra.getSelectedRow(), 0, false, false);
        }
    }//GEN-LAST:event_tableMuonTraKeyPressed

    private void btHienThi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHienThi1ActionPerformed
        // TODO add your handling code here:
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();
        ((DefaultTableModel) tableMuonTra.getModel()).setNumRows(0);
        String sql = "select *from quanlithuvien.muontra";
        try {
            cn.setAutoCommit(false);
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) tableMuonTra.getModel()).addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
            }

        } catch (SQLException ex) {
            Logger.getLogger(Quanlydocgia.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = 0; i < tableMuonTra.getRowCount(); i++) {
            insert1[i] = true;
        }
    }//GEN-LAST:event_btHienThi1ActionPerformed

    private void btNhapFile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNhapFile2ActionPerformed
        // TODO add your handling code here:
        Vector columns = new Vector();
        String path = "";
        String dir = "";
        String fileName = "";
        JFileChooser fileChooser = new JFileChooser();
        // tạo hộp thoại chọn 
        int rval = fileChooser.showOpenDialog(null);
        // nếu tùy chọn open
        if (rval == fileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getSelectedFile().getName();
            dir = fileChooser.getCurrentDirectory().toString();
            path = dir + "\\" + fileName;
        } else {
            return;
        }
        ((DefaultTableModel) tableChiTietMuonTra.getModel()).setNumRows(0);
        try {
            FileInputStream file = new FileInputStream(new File(path));

            // tạo một file excel
            XSSFWorkbook workbook = new XSSFWorkbook(file);

            // tạo một sheet trong excel có số thứ tự là 0
            XSSFSheet sheet = workbook.getSheetAt(0);

            // con trỏ duyệt hàng trong excel 
            Iterator<Row> rowIt = sheet.iterator();

            // nếu vẫn còn dòng trong file
            while (rowIt.hasNext()) {

                // tạo một dòng mới 
                Row row = rowIt.next();

                // con trỏ trỏ vào các ô trong một dòng 
                Iterator<Cell> cellIt = row.cellIterator();

                // nếu là hàng 0 
                if (row.getRowNum() == 0) {

                    // add tên các cột vào trong bảng jtable 
                    while (cellIt.hasNext()) {

                        Cell cell = cellIt.next();

                        columns.add(cell.getStringCellValue());

                        ((DefaultTableModel) tableChiTietMuonTra.getModel()).setColumnIdentifiers(columns);

                    }

                } else {

                    //vector chứa dữ liệu trong 1 dòng để add vào bảng jtabel
                    Vector<String> rowData = new Vector<String>();

                    // nếu vẫn còn ô tiếp theo
                    while (cellIt.hasNext()) {

                        // lấy cell trong bảng excel
                        Cell cell = cellIt.next();

                        // nếu cell có kiểu dữ liệu là string
                        if (cell.getCellType() == CellType.STRING) {

                            rowData.add(cell.getStringCellValue());

                        } // nếu cell có kiểu dữ liệu là số
                        else if (cell.getCellType() == CellType.NUMERIC) {

                            rowData.add(Double.toString(cell.getNumericCellValue()));

                        }

                    }

                    // add dữ liệu vào trong bảng jtable 
                    ((DefaultTableModel) tableChiTietMuonTra.getModel()).addRow(rowData);
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(Quanlymuontra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btNhapFile2ActionPerformed

    private void btHienThi2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHienThi2ActionPerformed
        // TODO add your handling code here:
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();
        ((DefaultTableModel) tableChiTietMuonTra.getModel()).setNumRows(0);
        String sql = "select *from quanlithuvien.chitietmuontra";
        try {
            cn.setAutoCommit(false);
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) tableChiTietMuonTra.getModel()).addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(Quanlydocgia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btHienThi2ActionPerformed

    private void btThem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btThem2ActionPerformed
        // TODO add your handling code here:
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();

        // Thêm một bản ghi vào trong database
        String sql = "insert into quanlithuvien.chitietmuontra values (?,?,?,?,?,?,?)";
        try {
            cn.setAutoCommit(false);
            // tạo câu lệnh sql
            PreparedStatement pst = cn.prepareStatement(sql);
            // Đọc dữ liệu từ một dòng trong bảng table để thêm vào phần values
            for (int i = 0; i < tableChiTietMuonTra.getRowCount(); i++) {
                // kiểm tra xem 1 dòng có dữ liệu hay không
                if (!isEmptyRow(i)) {
                    // thay thế các dấu hỏi chấm bằng các ô dữ liệu trong bảng
                    pst.setString(1, (String) tableChiTietMuonTra.getValueAt(i, 0));
                    pst.setString(2, (String) tableChiTietMuonTra.getValueAt(i, 1));
                    pst.setString(3, (String) tableChiTietMuonTra.getValueAt(i, 2));
                    pst.setString(4, (String) tableChiTietMuonTra.getValueAt(i, 3));
                    pst.setString(5, (String) tableChiTietMuonTra.getValueAt(i, 4));
                    pst.setString(6, (String) tableChiTietMuonTra.getValueAt(i, 5));
                    pst.setString(7, (String) tableChiTietMuonTra.getValueAt(i, 6));
                    // thực hiện câu lệnh
                    pst.addBatch();
                    pst.executeUpdate();
                    cn.commit();
                }
            }
            JOptionPane.showMessageDialog(null, "Bạn đã thêm thành công");
        } catch (SQLException ex) {
            Logger.getLogger(Quanlymuontra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btThem2ActionPerformed

    private void btXuatFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXuatFile1ActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fis = new FileInputStream("I:\\quanlythuvien\\tbmuontra.docx");
            XWPFDocument xdoc = new XWPFDocument(OPCPackage.open(fis));
            Iterator bodyElementIterator = xdoc.getBodyElementsIterator();
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();

                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    java.util.List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        setDefaultTable(table);
                        for (int i = 1; i < table.getRows().size(); i++) {
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                removeParagraphs(table.getRow(i).getCell(j));
                                XWPFParagraph paragraph = table.getRow(i).getCell(j).addParagraph();
                                paragraph.createRun().setText(tableMuonTra.getValueAt(i, j).toString());
                            }

                        }
                        addRowData1(table, table.getRows().size());
                    }
                }
            }
            OutputStream out = new FileOutputStream("I:\\quanlythuvien\\tbmuontra.docx");
            xdoc.write(out);
            out.close();

        } catch (IOException | InvalidFormatException ex) {
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "File đã tạo thành công!\nẤn yes để mở file?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File("I:\\quanlythuvien\\tbmuontra.docx");
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
        } else {
        }

    }//GEN-LAST:event_btXuatFile1ActionPerformed

    private void btSua1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSua1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableMuonTra.getModel();
        ConnectionDB connectionDB = new ConnectionDB();
        Connection con = connectionDB.getConnection();
        String sql = "update quanlithuvien.muontra set madg = ?, manv = ?, tiendatcoc = ?, ngaymuon = ?, ngayhentra = ?, soluongmuon = ?, mamuontra = ? where madg = ?";
        int rowSelected = tableMuonTra.getSelectedRow();
        System.out.println(rowSelected);
        String temp = (String) tableModel.getValueAt(rowSelected, 0);
        System.out.println(temp);
        try {
            con.setAutoCommit(false);
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(8, temp);
            pst.setString(1, (String) tableMuonTra.getValueAt(rowSelected, 0));
            pst.setString(2, (String) tableMuonTra.getValueAt(rowSelected, 1));
            pst.setString(3, (String) tableMuonTra.getValueAt(rowSelected, 2));
            pst.setString(4, (String) tableMuonTra.getValueAt(rowSelected, 3));
            pst.setString(5, (String) tableMuonTra.getValueAt(rowSelected, 4));
            pst.setString(6, (String) tableMuonTra.getValueAt(rowSelected, 5));
            pst.setString(7, (String) tableMuonTra.getValueAt(rowSelected, 6));
            System.out.println("1");
            pst.addBatch();
            pst.executeUpdate();
            con.commit();
            JOptionPane.showMessageDialog(null, "Bạn đã sửa thành công");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btSua1ActionPerformed

    private void btTimKiem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTimKiem1ActionPerformed
        // TODO add your handling code here:
        Searching();
    }//GEN-LAST:event_btTimKiem1ActionPerformed

    private void tableMuonTraMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMuonTraMouseReleased
        // TODO add your handling code here:
        tableMuonTra.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = tableMuonTra.rowAtPoint(e.getPoint());
                if (r >= 0 && r < tableMuonTra.getRowCount()) {
                    tableMuonTra.setRowSelectionAllowed(true);
                } else {
                    tableMuonTra.clearSelection();
                }

                int[] rowindex = tableMuonTra.getSelectedRows();
                for (int i = 0; i < rowindex.length; i++) {
                    int j = rowindex[i];
                    if (j < 0) {
                        return;
                    }
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    JPopupMenu popup = popUp();
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }

            }

            private JPopupMenu popUp() {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem deleteTable = new JMenuItem("Xóa bảng");
                deleteTable.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        ((DefaultTableModel) tableMuonTra.getModel()).setNumRows(0);
                        ((DefaultTableModel) tableMuonTra.getModel()).addRow(new Object[]{null});
                    }
                });
                popup.add(deleteTable);
                return popup;
            }

        });
    }//GEN-LAST:event_tableMuonTraMouseReleased

    private void tableMuonTraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMuonTraMouseClicked
        // TODO add your handling code here:
        int row = tableMuonTra.getSelectedRow();
        checkRecordExcisted((String) tableMuonTra.getValueAt(row, 6), row);
    }//GEN-LAST:event_tableMuonTraMouseClicked

    private void btXoa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXoa1ActionPerformed

        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Bạn có chắc chắn muốn xóa không");
        int[] rows = tableMuonTra.getSelectedRows();
        Arrays.sort(rows);
        for (int i = 0; i < rows.length; i++) {
            int row = rows[i];
            ConnectionDB connectDB = new ConnectionDB();
            Connection connection = connectDB.getConnection();

            DefaultTableModel tableModel = (DefaultTableModel) tableMuonTra.getModel();
            String sql = "DELETE FROM quanlithuvien.muontra WHERE (mamuontra = ?)";
            try {
                connection.setAutoCommit(false);
                PreparedStatement pst = connection.prepareStatement(sql);
                String mamuontra = (String) tableModel.getValueAt(row, 0);
                pst.setString(1, mamuontra);
                pst.executeUpdate();
                connection.commit();
            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Can not delele!\n" + ex.getMessage());
            }
            ((DefaultTableModel) tableMuonTra.getModel()).removeRow(row);
            for (int j = i + 1; j < rows.length; j++) {
                rows[j] = rows[j] - 1;
            }
        }
        JOptionPane.showMessageDialog(null, "Bạn đã xóa thành công");
    }//GEN-LAST:event_btXoa1ActionPerformed

    private void btSua2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSua2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableChiTietMuonTra.getModel();
        ConnectionDB connectionDB = new ConnectionDB();
        Connection con = connectionDB.getConnection();
        String sql = "update quanlithuvien.chitietmuontra set machitiet = ?, masach = ?, ngayhentra = ?, ngaytra = ?, sotienphat = ?, madg = ?, mamuontra = ? where machitiet = ?";
        int rowSelected = tableChiTietMuonTra.getSelectedRow();
        String temp = (String) tableModel.getValueAt(rowSelected, 0);
        try {
            con.setAutoCommit(false);
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(8, temp);
            pst.setString(1, (String) tableChiTietMuonTra.getValueAt(rowSelected, 0));
            pst.setString(2, (String) tableChiTietMuonTra.getValueAt(rowSelected, 1));
            pst.setString(3, (String) tableChiTietMuonTra.getValueAt(rowSelected, 2));
            pst.setString(4, (String) tableChiTietMuonTra.getValueAt(rowSelected, 3));
            pst.setString(5, (String) tableChiTietMuonTra.getValueAt(rowSelected, 4));
            pst.setString(6, (String) tableChiTietMuonTra.getValueAt(rowSelected, 5));
            pst.setString(7, (String) tableChiTietMuonTra.getValueAt(rowSelected, 6));
            pst.addBatch();
            pst.executeUpdate();
            con.commit();
            JOptionPane.showMessageDialog(null, " Bạn đã sửa thành công");
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btSua2ActionPerformed

    private void btXoa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXoa2ActionPerformed
        // TODO add your handling code here:

        JOptionPane.showMessageDialog(null, "Bạn có chắc chắn muốn xóa không");
        int[] rows = tableChiTietMuonTra.getSelectedRows();
        Arrays.sort(rows);
        for (int i = 0; i < rows.length; i++) {
            int row = rows[i];
            ConnectionDB connectDB = new ConnectionDB();
            Connection connection = connectDB.getConnection();

            DefaultTableModel tableModel = (DefaultTableModel) tableChiTietMuonTra.getModel();
            String sql = "DELETE FROM quanlithuvien.chitietmuontra WHERE (machitiet = ?)";
            try {
                connection.setAutoCommit(false);
                PreparedStatement pst = connection.prepareStatement(sql);
                String machitiet = (String) tableModel.getValueAt(row, 0);
                pst.setString(1, machitiet);
                pst.executeUpdate();
                connection.commit();
            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Can not delele!\n" + ex.getMessage());
            }
            ((DefaultTableModel) tableChiTietMuonTra.getModel()).removeRow(row);
            for (int j = i + 1; j < rows.length; j++) {
                rows[j] = rows[j] - 1;
            }
        }
        JOptionPane.showMessageDialog(null, "Bạn đã xóa thành công");

    }//GEN-LAST:event_btXoa2ActionPerformed

    private void tableChiTietMuonTraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableChiTietMuonTraMouseClicked

    }//GEN-LAST:event_tableChiTietMuonTraMouseClicked

    private void tableChiTietMuonTraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableChiTietMuonTraKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableChiTietMuonTra.getSelectedRow() == tableChiTietMuonTra.getRowCount() - 1) {
            ((DefaultTableModel) tableChiTietMuonTra.getModel()).addRow(new Object[]{null});
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableChiTietMuonTra.getSelectedColumn() == tableChiTietMuonTra.getColumnCount() - 1) {
            tableChiTietMuonTra.changeSelection(tableChiTietMuonTra.getSelectedRow(), 0, false, false);
        }

        if (evt.getKeyCode() == KeyEvent.VK_F && evt.isControlDown()) {
            Searching();

        }
    }//GEN-LAST:event_tableChiTietMuonTraKeyPressed

    private void tableChiTietMuonTraMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableChiTietMuonTraMouseReleased
        // TODO add your handling code here:
        tableChiTietMuonTra.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = tableChiTietMuonTra.rowAtPoint(e.getPoint());
                if (r >= 0 && r < tableChiTietMuonTra.getRowCount()) {
                    tableChiTietMuonTra.setRowSelectionAllowed(true);
                } else {
                    tableChiTietMuonTra.clearSelection();
                }

                int[] rowindex = tableChiTietMuonTra.getSelectedRows();
                for (int i = 0; i < rowindex.length; i++) {
                    int j = rowindex[i];
                    if (j < 0) {
                        return;
                    }
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    JPopupMenu popup = popUp();
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }

            }

            private JPopupMenu popUp() {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem deleteTable = new JMenuItem("Xóa bảng");
                deleteTable.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        ((DefaultTableModel) tableChiTietMuonTra.getModel()).setNumRows(0);
                        ((DefaultTableModel) tableChiTietMuonTra.getModel()).addRow(new Object[]{null});
                    }
                });
                popup.add(deleteTable);
                return popup;
            }

        });
    }//GEN-LAST:event_tableChiTietMuonTraMouseReleased

    private void btXuatFile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXuatFile2ActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fis = new FileInputStream("I:\\quanlythuvien\\tbchitietmuontra.docx");
            XWPFDocument xdoc = new XWPFDocument(OPCPackage.open(fis));
            Iterator bodyElementIterator = xdoc.getBodyElementsIterator();
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();

                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    java.util.List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        setDefaultTable(table);
                        for (int i = 1; i < table.getRows().size(); i++) {
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                removeParagraphs(table.getRow(i).getCell(j));
                                XWPFParagraph paragraph = table.getRow(i).getCell(j).addParagraph();

                                paragraph.createRun().setText(tableChiTietMuonTra.getValueAt(i, j).toString());
                            }

                        }
                        addRowData(table, table.getRows().size());
                    }
                }
            }
            OutputStream out = new FileOutputStream("I:\\quanlythuvien\\tbchitietmuontra.docx");
            xdoc.write(out);
            out.close();

        } catch (IOException | InvalidFormatException ex) {
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "File đã tạo thành công!\nẤn yes để mở file?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File("I:\\quanlythuvien\\tbchitietmuontra.docx");
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
        } else {
        }
    }//GEN-LAST:event_btXuatFile2ActionPerformed

    private void btTimKiem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTimKiem2ActionPerformed
        // TODO add your handling code here:
        Searching2();
    }//GEN-LAST:event_btTimKiem2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JlabelHovaTensv;
    private javax.swing.JButton btHienThi1;
    private javax.swing.JButton btHienThi2;
    private javax.swing.JButton btNhapFile1;
    private javax.swing.JButton btNhapFile2;
    private javax.swing.JButton btSua1;
    private javax.swing.JButton btSua2;
    private javax.swing.JButton btThem1;
    private javax.swing.JButton btThem2;
    private javax.swing.JButton btTimKiem1;
    private javax.swing.JButton btTimKiem2;
    private javax.swing.JButton btXoa1;
    private javax.swing.JButton btXoa2;
    private javax.swing.JButton btXuatFile1;
    private javax.swing.JButton btXuatFile2;
    private javax.swing.JLabel jLabelmuontra;
    private javax.swing.JLabel jLabelmuontrachitiet;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableChiTietMuonTra;
    private javax.swing.JTable tableMuonTra;
    // End of variables declaration//GEN-END:variables

    private boolean isEmptyRow(int i) {
        for (int j = 0; j < tableMuonTra.getColumnCount(); j++) {
            String str = (String) tableMuonTra.getValueAt(i, j);
            if (str == null) {
                return true;
            }
        }
        return false;
    }

    private static void removeParagraphs(XWPFTableCell tableCell) {
        int count = tableCell.getParagraphs().size();
        for (int i = 0; i < count; i++) {
            tableCell.removeParagraph(i);
        }
    }

    private void addRowData(XWPFTable table, int lastRowPosition) {
        for (int i = lastRowPosition - 1; i < tableChiTietMuonTra.getRowCount(); i++) {
            XWPFTableRow newRow = table.createRow();
            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                newRow.getCell(j).setText(tableChiTietMuonTra.getValueAt(i, j).toString());
            }

        }
    }

    private void setDefaultTable(XWPFTable table) {
        for (int i = 1; i < table.getRows().size(); i++) {
            table.removeRow(1);
        }
    }

    private void checkRecordExcisted(String string, int row) {
        boolean flag = false;
        ConnectionDB con = new ConnectionDB();
        Connection cn = con.getConnection();
        String sql = "Select * from quanlithuvien.chitietmuontra where (mamuontra = '" + string + "')";
        try {
            cn.setAutoCommit(false);
            Statement st = cn.createStatement();

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                ((DefaultTableModel) tableChiTietMuonTra.getModel()).setNumRows(0);
                ((DefaultTableModel) tableChiTietMuonTra.getModel()).addRow(new Object[]{rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                });
                flag = true;
            }
        } catch (Exception e) {

        }
        if (flag == false) {
            ((DefaultTableModel) tableChiTietMuonTra.getModel()).setNumRows(0);
            ((DefaultTableModel) tableChiTietMuonTra.getModel()).addRow(new Object[]{null});
            tableChiTietMuonTra.setValueAt(tableMuonTra.getValueAt(row, 6), 0, 6);
        }
    }

    private void Searching() {
        JFrame searchingBox = new JFrame("Tìm kiếm");
        searchingBox.setLocation(450, 400);
        searchingBox.setSize(600, 200);
        jComboBox1 = new javax.swing.JComboBox<>();
        searchBar = new javax.swing.JTextField();
        jLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        searchingBox.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tìm kiếm theo", "Mã độc giả", "Mã nhân viên", "Tiền đặt cọc", "Ngày mượn", "Ngày hẹn trả", "Số lượng mượn", "Mã mượn trả"}));
        jComboBox1.addActionListener((ActionEvent evt) -> {
            JComboBox<String> combo = (JComboBox<String>) evt.getSource();
            String selected = (String) combo.getSelectedItem();
            if (selected != null) {
                switch (selected) {
                    case "Mã độc giả":
                        choose = 1;
                        break;
                    case "Mã nhân viên":
                        choose = 2;
                        break;
                    case "Tiền đặt cọc":
                        choose = 3;
                        break;
                    case "Ngày mượn":
                        choose = 4;
                        break;
                    case "Ngày hẹn trả":
                        choose = 5;
                        break;
                    case "Số lượng mượn":
                        choose = 6;
                        break;
                    case "Mã mượn trả":
                        choose = 7;
                        break;
                }
            }
        });
        searchBar.setToolTipText("Search");

        jLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel.setText("Tìm kiếm");
        jLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        okButton.setText("OK");
        okButton.addActionListener((ActionEvent e) -> {
            process();
        });

        searchBar.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    process();
                }
            }
        });
        javax.swing.GroupLayout layoutSearchingBox = new javax.swing.GroupLayout(searchingBox.getContentPane());
        searchingBox.getContentPane().setLayout(layoutSearchingBox);
        layoutSearchingBox.setHorizontalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutSearchingBox.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(40, Short.MAX_VALUE))
        );
        layoutSearchingBox.setVerticalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutSearchingBox.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(okButton))
                        .addContainerGap(70, Short.MAX_VALUE))
        );
        searchingBox.setVisible(true);
    }

    private void process() {
        if (choose == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn thuộc tính tìm kiếm!");
            return;
        } else if (searchBar.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn hãy nhập vào ô tìm kiếm!");
            return;
        }
        ((DefaultTableModel) tableMuonTra.getModel()).setNumRows(0);
        ConnectionDB connectDB = new ConnectionDB();
        Connection connection = connectDB.getConnection();
        String text = searchBar.getText().trim().replaceAll("\\s+", " ");
        DefaultTableModel tableModel = (DefaultTableModel) tableMuonTra.getModel();
        switch (choose) {
            case 1:
                String sql = "SELECT * FROM quanlithuvien.muontra WHERE (madg= '" + text + "')";
                System.out.println(sql);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});

                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 2:
                String sql2 = "SELECT * FROM quanlithuvien.muontra WHERE (manv = '" + text + "')";
                System.out.println(sql2);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql2);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 3:
                String sql3 = "SELECT * FROM quanlithuvien.muontra WHERE (tiendatcoc = '" + text + "')";
                System.out.println(sql3);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql3);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 4:
                String sql4 = "SELECT * FROM quanlithuvien.muontra WHERE (ngaymuon = '" + text + "')";
                System.out.println(sql4);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql4);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 5:
                String sql5 = "SELECT * FROM quanlithuvien.muontra WHERE (ngayhentra = '" + text + "')";
                System.out.println(sql5);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql5);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 6:
                String sql6 = "SELECT * FROM quanlithuvien.muontra WHERE (soluongmuon = '" + text + "')";
                System.out.println(sql6);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql6);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 7:
                String sql7 = "SELECT * FROM quanlithuvien.muontra WHERE (mamuontra = '" + text + "')";
                System.out.println(sql7);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql7);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableMuonTra.setModel(tableModel);
                    warning(tableMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;

        }
    }

    private void warning(int rowCount) {
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "Không có kết quả phù hợp!");
        }
    }

    private void Searching2() {
        JFrame searchingBox2 = new JFrame("Tìm kiếm");
        searchingBox2.setLocation(450, 400);
        searchingBox2.setSize(600, 200);
        jComboBox2 = new javax.swing.JComboBox<>();
        searchBar2 = new javax.swing.JTextField();
        jLabe2 = new javax.swing.JLabel();
        okButton2 = new javax.swing.JButton();
        searchingBox2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tìm kiếm theo", "Mã chi tiết", "Mã sách", "Ngày hẹn trả", "Ngày trả", "Số tiền phạt", "Mã độc giả", "Mã mượn trả"}));
        jComboBox2.addActionListener((ActionEvent evt) -> {
            JComboBox<String> combo = (JComboBox<String>) evt.getSource();
            String selected = (String) combo.getSelectedItem();
            if (selected != null) {
                switch (selected) {
                    case "Mã chi tiết":
                        choose2 = 1;
                        break;
                    case "Mã sách":
                        choose2 = 2;
                        break;
                    case "Ngày hẹn trả":
                        choose2 = 3;
                        break;
                    case "Ngày trả":
                        choose2 = 4;
                        break;
                    case "Số tiền phạt":
                        choose2 = 5;
                        break;
                    case "Mã độc giả":
                        choose2 = 6;
                        break;
                    case "Mã mượn trả":
                        choose2 = 7;
                        break;
                }
            }

        });
        searchBar2.setToolTipText("Search");

        jLabe2.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabe2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabe2.setText("Tìm kiếm");
        jLabe2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        okButton2.setText("OK");
        okButton2.addActionListener((ActionEvent e) -> {
            process2();
        });

        searchBar2.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    process2();
                }
            }
        });
        javax.swing.GroupLayout layoutSearchingBox2 = new javax.swing.GroupLayout(searchingBox2.getContentPane());
        searchingBox2.getContentPane().setLayout(layoutSearchingBox2);
        layoutSearchingBox2.setHorizontalGroup(
                layoutSearchingBox2.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutSearchingBox2.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layoutSearchingBox2.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabe2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(40, Short.MAX_VALUE))
        );
        layoutSearchingBox2.setVerticalGroup(
                layoutSearchingBox2.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutSearchingBox2.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layoutSearchingBox2.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabe2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(okButton2))
                        .addContainerGap(70, Short.MAX_VALUE))
        );
        searchingBox2.setVisible(true);
    }

    private void process2() {
        if (choose2 == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn thuộc tính tìm kiếm!");
            return;
        } else if (searchBar2.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn hãy nhập vào ô tìm kiếm!");
            return;
        }
        ((DefaultTableModel) tableChiTietMuonTra.getModel()).setNumRows(0);
        ConnectionDB connectDB = new ConnectionDB();
        Connection connection = connectDB.getConnection();
        String text = searchBar2.getText().trim().replaceAll("\\s+", " ");
        DefaultTableModel tableModel = (DefaultTableModel) tableChiTietMuonTra.getModel();
        switch (choose2) {
            case 1:
                String sql = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (machitiet= '" + text + "')";
                System.out.println(sql);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});

                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 2:
                String sql2 = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (masach = '" + text + "')";
                System.out.println(sql2);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql2);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 3:
                String sql3 = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (ngayhentra = '" + text + "')";
                System.out.println(sql3);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql3);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 4:
                String sql4 = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (ngaytra = '" + text + "')";
                System.out.println(sql4);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql4);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 5:
                String sql5 = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (sotienphat = '" + text + "')";
                System.out.println(sql5);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql5);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 6:
                String sql6 = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (madg = '" + text + "')";
                System.out.println(sql6);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql6);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 7:
                String sql7 = "SELECT * FROM quanlithuvien.chitietmuontra WHERE (mamuontra = '" + text + "')";
                System.out.println(sql7);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql7);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)});
                    }
                    tableChiTietMuonTra.setModel(tableModel);
                    warning2(tableChiTietMuonTra.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;

        }
    }

    private void warning2(int rowCount) {
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "Không có kết quả phù hợp!");
        }
    }

    private void addRowData1(XWPFTable table, int size) {
        for (int i = size - 1; i < tableMuonTra.getRowCount(); i++) {
            XWPFTableRow newRow = table.createRow();
            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                newRow.getCell(j).setText(tableMuonTra.getValueAt(i, j).toString());
            }

        }
    }
}
