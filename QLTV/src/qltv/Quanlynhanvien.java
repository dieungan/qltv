/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qltv;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.sql.*;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.scene.input.KeyCode.S;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.TabExpander;
import javax.swing.text.html.parser.DTDConstants;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author Ngan Sam
 */
public class Quanlynhanvien extends javax.swing.JPanel {
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField searchBar;
    private int choose = 0;
    private boolean[] insert = new boolean[1000000];
    /**
     * Creates new form Quanlynhanvien
     */
    public Quanlynhanvien() {
        initComponents();
        for (int i = 0; i < insert.length; i++) {
            boolean b = insert[i];
            b = false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btXuat = new javax.swing.JButton();
        deleteData = new javax.swing.JButton();
        findData = new javax.swing.JButton();
        addData = new javax.swing.JButton();
        btNhapfile = new javax.swing.JButton();
        btSua = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        showData = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        btXuat.setText("Xuất file");
        btXuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXuatActionPerformed(evt);
            }
        });

        deleteData.setText("Xóa");
        deleteData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataActionPerformed(evt);
            }
        });

        findData.setText("Tìm kiếm");
        findData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDataActionPerformed(evt);
            }
        });

        addData.setText("Thêm");
        addData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataActionPerformed(evt);
            }
        });

        btNhapfile.setText("Nhập file");
        btNhapfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNhapfileActionPerformed(evt);
            }
        });

        btSua.setText("Sửa");
        btSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuaActionPerformed(evt);
            }
        });

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã nhân viên", "Họ và tên", "Số điện thoại", "Giới tính"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableEmployee.setCellSelectionEnabled(true);
        tableEmployee.setRowHeight(26);
        tableEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableEmployeeMouseReleased(evt);
            }
        });
        tableEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableEmployeeKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableEmployee);

        showData.setText("Hiển thị");
        showData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(204, 204, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nguyễn Thị Ngân - 20165434");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(showData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btSua)
                .addGap(16, 16, 16)
                .addComponent(deleteData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(findData))
            .addGroup(layout.createSequentialGroup()
                .addComponent(btNhapfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btXuat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(jLabel2)
                .addGap(69, 69, 69))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btXuat)
                            .addComponent(btNhapfile)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findData)
                    .addComponent(deleteData)
                    .addComponent(btSua)
                    .addComponent(addData)
                    .addComponent(showData)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXuatActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fis = new FileInputStream("I:\\quanlythuvien\\tbnhanvien.docx");
            XWPFDocument xdoc = new XWPFDocument(OPCPackage.open(fis));
            Iterator bodyElementIterator = xdoc.getBodyElementsIterator();
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();

                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    java.util.List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        setDefaultTable(table);
                        for (int i = 1; i < table.getRows().size(); i++) {
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                removeParagraphs(table.getRow(i).getCell(j));
                                XWPFParagraph paragraph = table.getRow(i).getCell(j).addParagraph();
                                paragraph.createRun().setText(tableEmployee.getValueAt(i, j).toString());
                            }

                        }
                        addRowData(table, table.getRows().size());
                    }
                }
            }
            OutputStream out = new FileOutputStream("I:\\quanlythuvien\\tbnhanvien.docx");
            xdoc.write(out);
            out.close();

        } catch (IOException | InvalidFormatException ex) {
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "Xuất file thành công!\nẤn yes để mở file?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File("I:\\quanlythuvien\\tbnhanvien.docx");
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
        } else {
        }

//        JFileChooser chooser = new JFileChooser();
//        int i = chooser.showSaveDialog(this);
//        if (i == JFileChooser.APPROVE_OPTION) {
//            File file = chooser.getSelectedFile();
//            try {
//                FileOutputStream out = new FileOutputStream(file + ".txt");
//                Writer writer = new java.io.OutputStreamWriter(out, "utf8");
//                BufferedWriter bwrite = new BufferedWriter(writer);
//                DefaultTableModel model = (DefaultTableModel) tableEmployee.getModel();
//                for (int j = 0; j < model.getColumnCount(); j++) {
//                    bwrite.write(model.getColumnName(j) + "\t");
//
//                }
//                bwrite.write("\n");
//                for (int j = 0; j < model.getRowCount(); j++) {
//                    for (int k = 0; k < model.getColumnCount(); k++) {
//                        bwrite.write(model.getValueAt(j, k) + "\t");
//                    }
//                    bwrite.write("\n");
//                }
//                bwrite.close();
//                JOptionPane.showMessageDialog(this, "xuat file thanh cong");
//            } catch (IOException e) {
//                JOptionPane.showMessageDialog(this, "chua xuat duoc file");
//            }
//        }
    }//GEN-LAST:event_btXuatActionPerformed

    private void addDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataActionPerformed
        // TODO add your handling code here:
        // Tạo kết nối đến database
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();

        // Thêm một bản ghi vào trong database
        String sql = "insert into quanlithuvien.nhanvien values (?,?,?,?)";
        try {
            cn.setAutoCommit(false);
            // tạo câu lệnh sql
            PreparedStatement pst = cn.prepareStatement(sql);
            // Đọc dữ liệu từ một dòng trong bảng table để thêm vào phần values
            for (int i = 0; i < tableEmployee.getRowCount(); i++) {
                // kiểm tra xem 1 dòng có dữ liệu hay không
                if (!insert[i] && !isEmptyRow(i)) {
                    // thay thế các dấu hỏi chấm bằng các ô dữ liệu trong bảng
                    pst.setString(1, (String) tableEmployee.getValueAt(i, 0));
                    pst.setString(2, (String) tableEmployee.getValueAt(i, 1));
                    pst.setString(3, (String) tableEmployee.getValueAt(i, 2));
                    pst.setString(4, (String) tableEmployee.getValueAt(i, 3));
                    // thực hiện câu lệnh
                    pst.addBatch();
                    pst.executeUpdate();
                    cn.commit();
                }
            }
            JOptionPane.showMessageDialog(null," Bạn đã thêm thành công");
        } catch (SQLException ex) {
            Logger.getLogger(Quanlynhanvien.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addDataActionPerformed

    private void showDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataActionPerformed
        // TODO add your handling code here:
        // tạo kết nối đến database 
        ConnectionDB connectionDB = new ConnectionDB();
        Connection cn = connectionDB.getConnection();

        // đưa số dòng của table bằng 0
        ((DefaultTableModel) tableEmployee.getModel()).setNumRows(0);
        String sql = "select * from quanlithuvien.nhanvien";
        try {
            cn.setAutoCommit(false);
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) tableEmployee.getModel()).addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});
            }
            insert[tableEmployee.getRowCount() - 1] = true;
        } catch (Exception e) {
        }
       
    }//GEN-LAST:event_showDataActionPerformed

    private void tableEmployeeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableEmployeeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableEmployee.getSelectedRow() == tableEmployee.getRowCount() - 1) {
            ((DefaultTableModel) tableEmployee.getModel()).addRow(new Object[]{null});
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && tableEmployee.getSelectedColumn() == tableEmployee.getColumnCount() - 1) {
            tableEmployee.changeSelection(tableEmployee.getSelectedRow(), 0, false, false);
        }

        if (evt.getKeyCode() == KeyEvent.VK_F && evt.isControlDown()) {
            Searching();

        }
    }//GEN-LAST:event_tableEmployeeKeyPressed

    private void btNhapfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNhapfileActionPerformed
        // TODO add your handling code here:
        Vector columns = new Vector();
        String path = "";
        String dir = "";
        String fileName = "";
        JFileChooser fileChooser = new JFileChooser();
        // tạo hộp thoại chọn 
        int rval = fileChooser.showOpenDialog(null);
        // nếu tùy chọn open
        if (rval == fileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getSelectedFile().getName();
            dir = fileChooser.getCurrentDirectory().toString();
            path = dir + "\\" + fileName;
        } else {
            return;
        }
        ((DefaultTableModel) tableEmployee.getModel()).setNumRows(0);
        try {
            FileInputStream file = new FileInputStream(new File(path));

            // tạo một file excel
            XSSFWorkbook workbook = new XSSFWorkbook(file);

            // tạo một sheet trong excel có số thứ tự là 0
            XSSFSheet sheet = workbook.getSheetAt(0);

            // con trỏ duyệt hàng trong excel 
            Iterator<Row> rowIt = sheet.iterator();

            // nếu vẫn còn dòng trong file
            while (rowIt.hasNext()) {

                // tạo một dòng mới 
                Row row = rowIt.next();

                // con trỏ trỏ vào các ô trong một dòng 
                Iterator<Cell> cellIt = row.cellIterator();

                // nếu là hàng 0 
                if (row.getRowNum() == 0) {

                    // add tên các cột vào trong bảng jtable 
                    while (cellIt.hasNext()) {

                        Cell cell = cellIt.next();

                        columns.add(cell.getStringCellValue());

                        ((DefaultTableModel) tableEmployee.getModel()).setColumnIdentifiers(columns);

                    }

                } else {

                    //vector chứa dữ liệu trong 1 dòng để add vào bảng jtabel
                    Vector<String> rowData = new Vector<String>();

                    // nếu vẫn còn ô tiếp theo
                    while (cellIt.hasNext()) {

                        // lấy cell trong bảng excel
                        Cell cell = cellIt.next();

                        // nếu cell có kiểu dữ liệu là string
                        if (cell.getCellType() == CellType.STRING) {

                            rowData.add(cell.getStringCellValue());

                        } // nếu cell có kiểu dữ liệu là số
                        else if (cell.getCellType() == CellType.NUMERIC) {

                            rowData.add(Double.toString(cell.getNumericCellValue()));

                        }

                    }

                    // add dữ liệu vào trong bảng jtable 
                    ((DefaultTableModel) tableEmployee.getModel()).addRow(rowData);
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(Quanlynhanvien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btNhapfileActionPerformed

    private void deleteDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Bạn có chắc chắn muốn xóa không");
        int[] rows = tableEmployee.getSelectedRows();
        Arrays.sort(rows);
        for (int i = 0; i < rows.length; i++) {
            int row = rows[i];
            ConnectionDB connectDB = new ConnectionDB();
            Connection connection = connectDB.getConnection();

            DefaultTableModel tableModel = (DefaultTableModel) tableEmployee.getModel();
            String sql = "DELETE FROM quanlithuvien.nhanvien WHERE (manv = ?)";
            try {
                connection.setAutoCommit(false);
                PreparedStatement pst = connection.prepareStatement(sql);
                String manv = (String) tableModel.getValueAt(row, 0);
                pst.setString(1, manv);
                pst.executeUpdate();
                connection.commit();
            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Can not delele!\n" + ex.getMessage());
            }
            ((DefaultTableModel) tableEmployee.getModel()).removeRow(row);
            for (int j = i + 1; j < rows.length; j++) {
                rows[j] = rows[j] - 1;
            }
        }
        JOptionPane.showMessageDialog(null, "Bạn đã xóa thành công");

//        ConnectionDB connectionDB = new ConnectionDB();
//        Connection cn = connectionDB.getConnection();
//        DefaultTableModel model = (DefaultTableModel) tableEmployee.getModel();
//        String sql = "delete *from quanlithuvien.nhanvien where manv = ?";
//        try {
//            cn.setAutoCommit(false);
//            PreparedStatement pst = cn.prepareStatement(sql);
//            int arr[] = tableEmployee.getSelectedRows();
//            for (int i = 0; i < arr.length; i++) {
//                model.removeRow(arr[i]);
//            }
//            pst.addBatch();
//            pst.executeLargeUpdate();
//            cn.commit();
//            model.fireTableDataChanged();
//        } catch (SQLException ex) {
//            Logger.getLogger(Quanlynhanvien.class.getName()).log(Level.SEVERE, null, ex);
//        }
        // tạo câu lệnh sql
//        try {
//            cn.setAutoCommit(false);
//            PreparedStatement pst = cn.prepareStatement(sql);
//
//            int[] rows = tableEmployee.getSelectedRow();
//            for (int i = 0; i < rows.length; i++) {
//                model.removeRow(rows[i]-i);
//                pst.addBatch();
//                pst.executeLargeUpdate();
//                cn.commit();
//            }
//
//        } catch (SQLException ex) {
//            Logger.getLogger(Quanlynhanvien.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_deleteDataActionPerformed

    private void findDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDataActionPerformed
        // TODO add your handling code here:
        //new frameTK().setVisible(true);
       Searching();
//        ConnectionDB connectionDB = new ConnectionDB();
//        Connection cn = connectionDB.getConnection();
//        Vector vdata = new Vector();
//        Vector vtitle = new Vector();
//        DefaultTableModel model = (DefaultTableModel) this.tableEmployee.getModel();
//        model = new DefaultTableModel(vdata, vtitle);
//        vdata.clear();
//        vtitle.clear();
//        String sql = "select * from quanlithuvien.nhanvien where manv = ?";
//        try {
//            PreparedStatement sm = cn.prepareStatement(sql);
//            for (int i = 0; i < tableEmployee.getRowCount(); i++) {
//                sm.setString(1, (String) tableEmployee.getValueAt(i, 0));
//            }
//
//        } catch (SQLException ex) {
//            Logger.getLogger(Quanlynhanvien.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_findDataActionPerformed

    private void tableEmployeeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEmployeeMouseReleased
        // TODO add your handling code here:
        tableEmployee.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = tableEmployee.rowAtPoint(e.getPoint());
                if (r >= 0 && r < tableEmployee.getRowCount()) {
                    tableEmployee.setRowSelectionAllowed(true);
                } else {
                    tableEmployee.clearSelection();
                }

                int[] rowindex = tableEmployee.getSelectedRows();
                for (int i = 0; i < rowindex.length; i++) {
                    int j = rowindex[i];
                    if (j < 0) {
                        return;
                    }
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    JPopupMenu popup = popUp();
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }

            }

        });
    }//GEN-LAST:event_tableEmployeeMouseReleased

    private void btSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableEmployee.getModel();
        ConnectionDB connectionDB = new ConnectionDB();
        Connection con = connectionDB.getConnection();
        String sql = "update quanlithuvien.nhanvien set manv = ?, tennv = ?, sodt = ?, gioitinh = ? where manv = ?";
        int rowSelected = tableEmployee.getSelectedRow();
        String temp = (String) tableModel.getValueAt(rowSelected, 0);
        try {
            con.setAutoCommit(false);
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(5, temp);
            pst.setString(1, (String) tableEmployee.getValueAt(rowSelected, 0));
            pst.setString(2, (String) tableEmployee.getValueAt(rowSelected, 1));
            pst.setString(3, (String) tableEmployee.getValueAt(rowSelected, 2));
            pst.setString(4, (String) tableEmployee.getValueAt(rowSelected, 3));
            pst.addBatch();
            pst.executeUpdate();
            con.commit();
            JOptionPane.showMessageDialog(null, " Bạn đã sửa thành công");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btSuaActionPerformed

    private JPopupMenu popUp() {
        JPopupMenu popup = new JPopupMenu();
        JMenuItem deleteTable = new JMenuItem("Xóa bảng");
        deleteTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                ((DefaultTableModel) tableEmployee.getModel()).setNumRows(0);
                ((DefaultTableModel) tableEmployee.getModel()).addRow(new Object[]{null});
                for (int i = 0; i < insert.length; i++) {
                    boolean b = insert[i];
                    b = false;
                }
            }
        });
        popup.add(deleteTable);
        return popup;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addData;
    private javax.swing.JButton btNhapfile;
    private javax.swing.JButton btSua;
    private javax.swing.JButton btXuat;
    private javax.swing.JButton deleteData;
    private javax.swing.JButton findData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton showData;
    private javax.swing.JTable tableEmployee;
    // End of variables declaration//GEN-END:variables

    private boolean isEmptyRow(int i) {
        // đi từng ô trong hàng i và check xem ô này có dữ liệu hay không
        for (int j = 0; j < tableEmployee.getColumnCount(); j++) {
            String str = (String) tableEmployee.getValueAt(i, j);
            if (str == null) {
                return true;
            }
        }
        return false;
    }

    private static void removeParagraphs(XWPFTableCell tableCell) {
        int count = tableCell.getParagraphs().size();
        for (int i = 0; i < count; i++) {
            tableCell.removeParagraph(i);
        }
    }

    private void addRowData(XWPFTable table, int lastRowPosition) {
        for (int i = lastRowPosition - 1; i < tableEmployee.getRowCount(); i++) {
            XWPFTableRow newRow = table.createRow();
            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                newRow.getCell(j).setText(tableEmployee.getValueAt(i, j).toString());
            }

        }
    }

    private void setDefaultTable(XWPFTable table) {
        for (int i = 1; i < table.getRows().size(); i++) {
            table.removeRow(1);
        }
    }

    private void Searching() {
        JFrame searchingBox = new JFrame("Tìm kiếm");
        searchingBox.setLocation(450, 400);
        searchingBox.setSize(600, 200);
        jComboBox1 = new javax.swing.JComboBox<>();
        searchBar = new javax.swing.JTextField();
        jLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        searchingBox.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tìm kiếm theo","Mã nhân viên", "Tên nhân viên", "Số điện thoại", "Giới tính"}));
        jComboBox1.addActionListener((ActionEvent evt) -> {
            JComboBox<String> combo = (JComboBox<String>) evt.getSource();
            String selected = (String) combo.getSelectedItem();
            if (selected != null) {
                switch (selected) {
                    case "Mã nhân viên":
                        choose = 1;
                        break;
                    case "Tên nhân viên":
                        choose = 2;
                        break;
                    case "Số điện thoại":
                        choose = 3;
                        break;
                    case "Giới tính":
                        choose = 4;
                        break;
                }
            }
        });
        searchBar.setToolTipText("Search");

        jLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel.setText("Tìm kiếm");
        jLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        okButton.setText("OK");
        okButton.addActionListener((ActionEvent e) -> {
            process();
        });

        searchBar.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    process();
                }
            }
        });
        javax.swing.GroupLayout layoutSearchingBox = new javax.swing.GroupLayout(searchingBox.getContentPane());
        searchingBox.getContentPane().setLayout(layoutSearchingBox);
        layoutSearchingBox.setHorizontalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layoutSearchingBox.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(40, Short.MAX_VALUE))
        );
        layoutSearchingBox.setVerticalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layoutSearchingBox.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(okButton))
                                .addContainerGap(70, Short.MAX_VALUE))
        );
        searchingBox.setVisible(true);
//        setLocationRelativeTo(null);
    }

    private void process() {
       if (choose == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn thuộc tính tìm kiếm!");
            return;
        } else if (searchBar.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn hãy nhập vào ô tìm kiếm!");
            return;
        }
        ((DefaultTableModel) tableEmployee.getModel()).setNumRows(0);
        ConnectionDB connectDB = new ConnectionDB();
        Connection connection = connectDB.getConnection();
        String text = searchBar.getText().trim().replaceAll("\\s+", " ");
        DefaultTableModel tableModel = (DefaultTableModel) tableEmployee.getModel();
        switch (choose) {
            case 1:
                String sql = "SELECT * FROM quanlithuvien.nhanvien WHERE (manv = '" + text + "')";
                System.out.println(sql);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4)});
                        
                    }
                    tableEmployee.setModel(tableModel);
                    warning(tableEmployee.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 2:
                String sql2 = "SELECT * FROM quanlithuvien.nhanvien WHERE (tennnv = '" + text + "')";
                System.out.println(sql2);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql2);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4)});
                    }
                    tableEmployee.setModel(tableModel);
                    warning(tableEmployee.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 3:
                String sql3 = "SELECT * FROM quanlithuvien.nhanvien WHERE (sodt = '" + text + "')";
                System.out.println(sql3);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql3);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4)});
                    }
                    tableEmployee.setModel(tableModel);
                    warning(tableEmployee.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 4:
                String sql4 = "SELECT * FROM quanlithuvien.nhanvien WHERE (gioitinh = '" + text + "')";
                System.out.println(sql4);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql4);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4) });
                    }
                    tableEmployee.setModel(tableModel);
                    warning(tableEmployee.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            
    }
    }
    private void warning(int rowCount) {
      if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "Không có kết quả phù hợp!");
        }  
    
    }
    
}
